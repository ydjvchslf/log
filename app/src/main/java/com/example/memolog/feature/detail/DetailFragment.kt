package com.example.memolog.feature.detail

import android.app.AlertDialog
import android.content.Context
import android.content.Intent
import android.database.Cursor
import android.net.Uri
import android.net.Uri.parse
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModelProvider
import androidx.navigation.fragment.navArgs
import com.example.memolog.R
import com.example.memolog.ViewModelFactory
import com.example.memolog.databinding.FragmentDetailBinding
import com.example.memolog.repository.MemoRepository
import android.view.inputmethod.InputMethodManager

import android.os.Build
import android.view.WindowManager
import android.widget.EditText
import android.widget.Toast
import androidx.activity.OnBackPressedCallback
import androidx.annotation.RequiresApi

import androidx.navigation.fragment.findNavController
import com.example.memolog.getCurrentTime
import android.provider.MediaStore
import androidx.core.net.toUri
import com.example.memolog.event.ImageEvent
import org.greenrobot.eventbus.EventBus
import org.greenrobot.eventbus.Subscribe
import org.greenrobot.eventbus.ThreadMode
import java.lang.Exception
import java.io.File
import java.net.HttpCookie.parse
import java.net.URI
import java.util.logging.Level.parse


class DetailFragment : Fragment() {

    private lateinit var binding: FragmentDetailBinding
    lateinit var viewModelFactory: ViewModelFactory
    private lateinit var detailViewModel: DetailViewModel
    private var isEditMode = MutableLiveData(false)
    private var isLock = MutableLiveData(false)
    private var memoId = 0L
    private lateinit var backPressCallback: OnBackPressedCallback
    private var password = ""
    private var imageList = MutableLiveData(arrayListOf<String>())


    override fun onCreateView(
        inflater: LayoutInflater,
        container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View? {
        binding = FragmentDetailBinding.inflate(inflater, container, false)
        initViewModel()

        return binding.root
    }

    @RequiresApi(Build.VERSION_CODES.O)
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)
        Log.d("MemoDebug", "DetailFragment::onViewCreated-()")

        EventBus.getDefault().register(this)

        val args: DetailFragmentArgs by navArgs()
        memoId = args.memoId

        // Ï≤òÏùå Î©îÎ™® ÌÅ¥Î¶≠ ÌõÑ, ÎÇ¥Ïö© Í∞ÄÏ†∏Ïò§Îäî Î∂ÄÎ∂Ñ
        detailViewModel.getOneMemo(memoId) { memo ->
            binding.updatedTime.text = makeSimpleDate(memo.updatedTime)
            binding.textTitle.text = memo.title
            binding.textContent.text = memo.content
            isLock.postValue(memo.isLocked)
            Log.d("MemoDebug", "onViewCreated-() : ${isLock.value}")

            if(isLock.value == true){
                password = memo.password.toString()
                Log.d("MemoDebug", "password : $password")
            }
            // image ÏûàÎäîÏßÄ Ï≤¥ÌÅ¨
            memo.image.let{
                if(it?.size!! > 0){
                    val savedImageUri = memo.image!![0]
                    Log.d("MemoDebug", "savedImageUri: $savedImageUri")

//                    var u: String = savedImageUri
//                    var link = u.toUri()

                    binding.imageView.setImageURI(savedImageUri.toUri())
                    binding.imageView.visibility = View.VISIBLE
                }
            }
        }

        isEditMode.observe(viewLifecycleOwner) { isEditMode ->
            if (isEditMode) { // ÏàòÏ†ïÎ™®Îìú
                Log.d("MemoDebug", "isEditMode : $isEditMode")
                binding.editBtn.visibility = View.VISIBLE
                binding.deleteBtn.visibility = View.VISIBLE
                binding.editTitle.visibility = View.VISIBLE
                binding.editContent.visibility = View.VISIBLE
                binding.addPhotoBtn.visibility = View.VISIBLE

                binding.textTitle.visibility = View.GONE
                binding.textContent.visibility = View.GONE

                if(isLock.value == true){ // Ïû†Í∏àÏÉÅÌÉú
                    Log.d("MemoDebug", "isEditMode Í∞êÏãú isLock : ${isLock.value}")
                    binding.lockBtn.visibility = View.VISIBLE
                    binding.lockBtn.setBackgroundResource(R.drawable.ic_baseline_lock_24)

                }else if(isLock.value == false){ // Ìï¥Ï†úÏÉÅÌÉú
                    Log.d("MemoDebug", "isEditMode Í∞êÏãú isLock : ${isLock.value}")
                    binding.lockBtn.visibility = View.VISIBLE
                    binding.lockBtn.setBackgroundResource(R.drawable.ic_baseline_lock_open_24)
                }
            } else { // ÏàòÏ†ïÎ™®Îìú Ìï¥Ï†ú
                Log.d("MemoDebug", "isEditMode : $isEditMode")
                binding.editBtn.visibility = View.INVISIBLE
                binding.editTitle.visibility = View.INVISIBLE
                binding.deleteBtn.visibility = View.INVISIBLE
                binding.editContent.visibility = View.INVISIBLE
                binding.lockBtn.visibility = View.INVISIBLE
                //binding.unlockBtn.visibility = View.INVISIBLE
                binding.addPhotoBtn.visibility = View.INVISIBLE

                binding.textTitle.visibility = View.VISIBLE
                binding.textContent.visibility = View.VISIBLE

                // ÏàòÏ†ï ÎÇ¥Ïö© -> textView ÏÑ∏ÌåÖ
                binding.textTitle.text = binding.editTitle.text
                binding.textContent.text = binding.editContent.text

                // Ïû†Í∏à, Ìï¥Ï†úÎ≤ÑÌäº Î™®Îëê INVISIBLE
                //binding.unlockBtn.visibility = View.INVISIBLE
                binding.lockBtn.visibility = View.INVISIBLE

                // TODO:: ÌÇ§Î≥¥Îìú ÎÇ¥Î¶¨Í∏∞ Ïù¥Í≥≥Ïóê ÏûàÏóàÏùÑÎïå Ïôú ÏïàÎêêÏßÄ
            }
        }

        binding.lockBtn.setOnClickListener {
            if(isLock.value == true){
                Log.d("MemoDebug", "Î©îÎ™® Ïû†Í∏àÌï¥Ï†ú ÏïÑÏù¥ÏΩò ÌÅ¥Î¶≠")
                showUnlockDialog(memoId)
            }
        }

        //TODO:: DEBUG Î™®Îìú Îëê Î≤àÌÉÄÎäîÍ±∞ Ïù¥Ìï¥X
        isLock.observe(viewLifecycleOwner){ isLock ->
            if(isLock && isEditMode.value == true){ // Ïû†Í∏àÏÉÅÌÉú
                Log.d("MemoDebug", "11111 isLockÍ∞êÏãú isLock : $isLock")
                binding.lockBtn.setBackgroundResource(R.drawable.ic_baseline_lock_24)
                binding.lockBtn.setOnClickListener {
                   showUnlockDialog(memoId)
                }

            }else if(!isLock && isEditMode.value == true){ // Ìï¥Ï†úÏÉÅÌÉú
                Log.d("MemoDebug", "22222 isLockÍ∞êÏãú isLock : $isLock")
                binding.lockBtn.setBackgroundResource(R.drawable.ic_baseline_lock_open_24)
            }
        }

        binding.textTitle.setOnClickListener {
            isEditMode.value = true
            binding.editTitle.setText(binding.textTitle.text.toString())
            binding.editContent.setText(binding.textContent.text.toString())

            // ÏûêÎèô Ìè¨Ïª§Ïä§
            binding.editTitle.apply {
                setSelection(binding.textTitle.length())
                requestFocus()
            }

            // ÌÇ§Î≥¥Îìú Ïò¨Î¶¨Í∏∞ // TODO:: Ìï®ÏàòÎ°ú Îî∞Î°ú ÎßåÎì§Ïñ¥ÏÑú ÎπºÍ∏∞
            val inputMethodManager = context?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
            inputMethodManager.showSoftInput(binding.editTitle, InputMethodManager.SHOW_IMPLICIT)
        }

        binding.textContent.setOnClickListener {
            isEditMode.value = true
            binding.editTitle.setText(binding.textTitle.text.toString())
            binding.editContent.setText(binding.textContent.text.toString())

            // Ìè¨Ïª§Ïä§ & ÌÇ§Î≥¥Îìú Ïò¨Î¶¨Í∏∞
            binding.editContent.apply {
                setSelection(binding.textContent.length())
                requestFocus()
            }

            val inputMethodManager = context?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
            inputMethodManager.showSoftInput(binding.editContent, InputMethodManager.SHOW_IMPLICIT)
        }

        // edit Î≤ÑÌäº -> Î©îÎ™® ÏóÖÎç∞Ïù¥Ìä∏
        binding.editBtn.setOnClickListener {
            detailViewModel.getOneMemo(memoId) { current ->
                current.title = binding.editTitle.text.toString()
                current.content = binding.editContent.text.toString()
                val currentTime = getCurrentTime()
                current.updatedTime = currentTime

                if(imageList.value?.isNotEmpty() == true){
                    current.image = imageList.value
                }

                detailViewModel.updateMemo(current)

                // ÌÇ§Î≥¥Îìú ÎÇ¥Î¶¨Í∏∞
                val inputMethodManager = context?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
                inputMethodManager.hideSoftInputFromWindow(
                    activity?.currentFocus?.windowToken,
                    InputMethodManager.HIDE_IMPLICIT_ONLY
                )

                isEditMode.postValue(false)
            }
        }

        // delete Î≤ÑÌäº
        binding.deleteBtn.setOnClickListener {
            AlertDialog.Builder(context)
                .setMessage("Ï†ïÎßê ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\nÎ≥µÍµ¨Îäî Î∂àÍ∞ÄÌï©ÎãàÎã§üò≠")
                .setPositiveButton("yes") { _, _ ->
                    detailViewModel.deleteMemo(memoId)
                    this.findNavController().navigate(R.id.homeFragment)
                }
                .setNegativeButton("no") { _, _ ->
                    // do nothing
                }
                .show()
        }

        isLock.observe(viewLifecycleOwner){ isLock ->
            if(isLock){ // Ïû†Í∏à ÏÉÅÌÉú

            }else{ // Ïû†Í∏à Ìï¥Ï†ú ÏÉÅÌÉú
                binding.lockBtn.setOnClickListener {
                    showFirstLockDialog()
                }
            }
        }

        // ÏÇ¨ÏßÑ Ï∂îÍ∞Ä Î≤ÑÌäº
        binding.addPhotoBtn.setOnClickListener {
//            CropImage.activity()
//                .start(requireContext(), this)

            // Í∞§Îü¨Î¶¨ Îã§Ï§ëÏù¥ÎØ∏ÏßÄ ÏÑ†ÌÉù ÎùÑÏö∞Í∏∞
            val intent = Intent(Intent.ACTION_PICK)
            intent.type = MediaStore.Images.Media.CONTENT_TYPE
            intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true) // Îã§Ï§ë Ïù¥ÎØ∏ÏßÄ true
            intent.data = MediaStore.Images.Media.EXTERNAL_CONTENT_URI
            startActivityForResult(intent, 100)
            //activity?.startActivityForResult(intent, 100)

        }


        // back Î≤ÑÌäº -> Î©îÎ™® ÏóÖÎç∞Ïù¥Ìä∏
        binding.backBtn.setOnClickListener {
            //memoId
            reviseMemo()
        }


    }

    private fun initViewModel() {
        viewModelFactory = ViewModelFactory(MemoRepository())
        detailViewModel = ViewModelProvider(this, viewModelFactory).get(DetailViewModel::class.java)
    }

    // back key -> Î©îÎ™® ÏóÖÎç∞Ïù¥Ìä∏
    @RequiresApi(Build.VERSION_CODES.O)
    override fun onAttach(context: Context) {
        super.onAttach(context)
        backPressCallback = object : OnBackPressedCallback(true) {
            override fun handleOnBackPressed() {
                if(findNavController().currentDestination?.id == R.id.detailFragment) {
                    Log.d("MemoDebug", "DetailFragment::handleOnBackPressed-()")
                    reviseMemo()
                }
            }
        }
        requireActivity().onBackPressedDispatcher.addCallback(this, backPressCallback)
    }

    override fun onDetach() {
        super.onDetach()
        backPressCallback.remove()
    }

    @RequiresApi(Build.VERSION_CODES.O)
    private fun reviseMemo(){
        if (isEditMode.value == true) {
            detailViewModel.getOneMemo(memoId) { current ->
                current.title = binding.editTitle.text.toString()
                current.content = binding.editContent.text.toString()
                val currentTime = getCurrentTime()
                current.updatedTime = currentTime

                detailViewModel.updateMemo(current)
                isEditMode.postValue(false)
            }
        } else {
            detailViewModel.getOneMemo(memoId) { current ->
                current.title = binding.textTitle.text.toString()
                current.content = binding.textContent.text.toString()
                val currentTime = getCurrentTime()
                current.updatedTime = currentTime

                detailViewModel.updateMemo(current)
                isEditMode.postValue(false)
            }
        }
        this.findNavController().navigate(R.id.homeFragment)
    }

    private fun makeSimpleDate(before: String): String {
        return before.split("T")[0]
    }

    private fun showFirstLockDialog(){
        if (binding.inputPw.parent != null){
                (binding.inputPw.parent as ViewGroup).removeView(binding.inputPw)
                binding.inputPw.visibility = View.VISIBLE
                binding.inputPw.requestFocus()
        }

        val dialogBuilder = AlertDialog.Builder(context)
            .setMessage("ÎπÑÎ∞ÄÎ≤àÌò∏ Ïà´Ïûê ÎÑ§ÏûêÎ¶¨Î•º ÏÑ§Ï†ïÌï¥Ï£ºÏÑ∏Ïöî")
            .setView(binding.inputPw)
            .setPositiveButton("yes") { _, _ ->

                val firstPw = binding.inputPw.text.toString()
                Log.d("MemoDebug", "firstPw: $firstPw")
                if(firstPw.length != 4){
                    Toast.makeText(context, "ÎÑ§ ÏûêÎ¶¨Î•º Ï±ÑÏõåÏ£ºÏÑ∏Ïöî", Toast.LENGTH_SHORT).show() // TODO :: dialog ÏúÑÏóê toast ÎùÑÏö∞Í≥† Í∑∏ÎåÄÎ°ú dialog Î•º ÏÇ¥Î¶¥ Ïàò ÏóÜÎäîÏßÄ?
                    binding.inputPw.text = null
                    return@setPositiveButton
                }else {
                    showSecondLockDialog(firstPw)
                }
            }
            .setNegativeButton("cancel") { _, _ ->
                binding.inputPw.text = null
                return@setNegativeButton
            }
            .show()

        val window = dialogBuilder.window
        window?.clearFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM)
        window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE)
        //binding.inputPw.showKeyboard()
    }

    private fun showSecondLockDialog(firstPw: String){
        if (binding.inputPw.parent != null){
            (binding.inputPw.parent as ViewGroup).removeView(binding.inputPw)
            binding.inputPw.text = null
            binding.inputPw.requestFocus()
            binding.inputPw.visibility = View.VISIBLE
        }

        val dialogBuilder2 = AlertDialog.Builder(context)
            .setMessage("ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Îã§Ïãú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî")
            .setView(binding.inputPw)
            .setPositiveButton("yes") { _, _ ->

                val secondPw = binding.inputPw.text.toString()
                Log.d("MemoDebug", "secondPw: $secondPw")
                if(firstPw == secondPw){
                    Log.d("MemoDebug", "ÎπÑÎ∞ÄÎ≤àÌò∏ ÏùºÏπò")
                    // ÎπÑÎ∞ÄÎ≤àÌò∏ ÏóÖÎç∞Ïù¥Ìä∏
                    detailViewModel.lockMemo(memoId, secondPw)

                    Log.d("MemoDebug", "ÎπÑÎ∞ÄÎ≤àÌò∏ ÏóÖÎéÉ ÌõÑ isEditMode: ${isEditMode.value}, isLock.value: ${isLock.value}")
                    isLock.value = true
                    Log.d("MemoDebug", "isLock.value: ${isLock.value}")

                }else{
                    Log.d("MemoDebug", "ÎπÑÎ∞ÄÎ≤àÌò∏ Î∂àÏùºÏπò")
                    binding.inputPw.text = null
                    showSecondLockDialog(firstPw)
                }
            }
            .setNegativeButton("cancel") { _, _ ->
                binding.inputPw.text = null
            }
            .setNeutralButton("Ïû¨ÏÑ§Ï†ïÌïòÍ∏∞"){_, _ ->
                binding.inputPw.text = null
                showFirstLockDialog()
            }
            .show()

        val window = dialogBuilder2.window
        window?.clearFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM)
        window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE)
    }

    private fun showUnlockDialog(id: Long){
        if (binding.inputPw.parent != null){
            (binding.inputPw.parent as ViewGroup).removeView(binding.inputPw)
            binding.inputPw.visibility = View.VISIBLE
            binding.inputPw.text = null
            binding.inputPw.requestFocus()
        }

        val dialogBuilder3 = AlertDialog.Builder(context)
            .setMessage("Ïû†Í∏àÌï¥Ï†úÎ•º ÏúÑÌï¥ ÎπÑÎ∞ÄÎ≤àÌò∏Î•º Ï†ÅÏñ¥Ï£ºÏÑ∏Ïöî!")
            .setView(binding.inputPw)
            .setPositiveButton("yes") { _, _ ->
                val unlockPw = binding.inputPw.text.toString()
                Log.d("MemoDebug", "Ìï¥Ï†úÌï† ÎπÑÎ∞ÄÎ≤àÌò∏: $unlockPw")
                detailViewModel.getOneMemo(id){ memo ->
                    if(memo.password == unlockPw){
                        detailViewModel.unlockMemo(id)

                        binding.inputPw.text = null
                        isLock.postValue(false)

                    }else{
                        Log.d("MemoDebug", "memo.password: ${memo.password}," +
                                "ÏÇ¨Ïö©ÏûêÍ∞Ä ÏûÖÎ†•Ìïú pw: $unlockPw, ÏùºÏπòX")
                        binding.inputPw.text = null
                        isLock.postValue(false)
                        return@getOneMemo
                    }
                }

            }
            .setNegativeButton("cancel") { _, _ ->
                binding.inputPw.text = null
            }
            .show()

        val window = dialogBuilder3.window
        window?.clearFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE or WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM)
        window?.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE)
    }

    private fun EditText.showKeyboard() {
        requestFocus()
//        // ÌÇ§Î≥¥Îìú Ïò¨Î¶¨Í∏∞ // TODO:: Ìï®ÏàòÎ°ú Îî∞Î°ú ÎßåÎì§Ïñ¥ÏÑú ÎπºÍ∏∞
//        val inputMethodManager = context?.getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
//        inputMethodManager.showSoftInput(binding.editTitle, InputMethodManager.SHOW_IMPLICIT)
    }

    override fun startActivityForResult(intent: Intent?, requestCode: Int) {
        super.startActivityForResult(intent, requestCode)

        Log.d("MemoDebug", "DetailFragment::startActivityForResult-()")
        Log.d("MemoDebug", "DetailFragment:: requestCode: $requestCode, data: $intent")
    }

    @Subscribe(threadMode = ThreadMode.MAIN)
    fun onMessageEvent(event: ImageEvent?) {
        Log.d("MemoDebug", "DetailFragment::onMessageEvent-()")
        event?.let {
            //onActivityResult(it.requestCode, it.resultCode, it.data)
            Log.d("MemoDebug", "DetailFragment:: imageEvent: $event")

            var clipData = event.data?.clipData
            var uriList = arrayListOf<Uri>()
            clipData.let {
                for (i in 0 until clipData!!.itemCount) {
                    val imageUri: Uri = clipData.getItemAt(i).uri // ÏÑ†ÌÉùÌïú Ïù¥ÎØ∏ÏßÄÎì§Ïùò uriÎ•º Í∞ÄÏ†∏Ïò®Îã§.
                    try {
                        uriList.add(imageUri) //uriÎ•º listÏóê Îã¥ÎäîÎã§.
                        Log.d("MemoDebug", "uriList=> $uriList")
                    } catch (e: Exception) {
                        Log.d("MemoDebug", "e=> $e")
                    }
                }
                val contentUri = clipData.getItemAt(0).uri
                Log.d("MemoDebug", "contentUri====> $contentUri")

                val filePath = getRealPathFromURI(requireContext(), contentUri)
                Log.d("MemoDebug", "filePath====> $filePath")

                val realUri = Uri.fromFile(File(filePath))
                realUri.let {
                    Log.d("MemoDebug", "realUri====> $realUri")
                }

                imageList.value?.add(realUri.toString())
                binding.imageView.setImageURI(realUri)
                binding.imageView.visibility = View.VISIBLE


            }
        }
    }

    // content Uri -> Path(ÌååÏùºÍ≤ΩÎ°ú)
    private fun getRealPathFromURI(context: Context, contentUri: Uri?): String? {
        var cursor: Cursor? = null
        return try {
            val proj = arrayOf(MediaStore.Images.Media.DATA)
            cursor = context.contentResolver.query(contentUri!!, proj, null, null, null)
            val columnIndex: Int = cursor!!.getColumnIndexOrThrow(MediaStore.Images.Media.DATA)
            cursor.moveToFirst()
            cursor.getString(columnIndex)
        } finally {
            cursor?.close()
        }
    }

    override fun onDestroy() {
        super.onDestroy()
        EventBus.getDefault().unregister(this)
    }
}